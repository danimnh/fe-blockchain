{"version":3,"sources":["serviceWorker.js","index.js","config/index.js","store/effects/index.js","store/sw/index.js","utils/noop.js","utils/isMobile.js","utils/resetApp.js","utils/downloadFile.js","utils/sleep.js","components/Loading/styles.js","components/Loading/Component.js","errorHandling/Fallbacks/Loader/styles.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","axios","defaults","baseURL","document","ie","Promise","all","React","default","ReactDOM","App","render","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","getSWActions","handleSuccess","reg","handleUpdate","email","messages","app","crash","title","options","reset","loader","fail","images","failed","404","copyright","link","themes","light","palette","type","background","paper","primary","main","dark","contrastText","dateFormat","themePair","notifications","anchorOrigin","vertical","horizontal","autoHideDuration","maxSnack","isMobile","delay","minimumLoading","SW","sw","update","registrationWaiting","waiting","postMessage","e","target","resetApp","saveRegistration","theme","lsSave","mode","localStorage","setItem","genUUID","uuidv1","create","noop","getActions","setActions","swState","atom","key","isInitialized","isUpdated","useSW","useRecoilState","setSW","effects","downloadFile","sleep","ms","res","setTimeout","useStyles","makeStyles","preloader","position","width","height","left","top","display","justifyContent","alignItems","open","Loading","size","withoutBackground","classes","Paper","elevation","square","className","clsx","CircularProgress","thickness","color","defaultProps","root"],"mappings":"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","file":"static/js/main.dea4574a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import * as serviceWorker from \"./serviceWorker\";\r\n// eslint-disable-next-line\r\nimport axios from \"axios\";\r\nimport { getActions as getSWActions } from \"store/sw\";\r\n\r\nimport \"./global.css\";\r\n\r\naxios.defaults.baseURL = \"http://35.240.236.209:4000/\";\r\n// TO-DO : updated defaults\r\n// axios.defaults.baseURL = \"https://be-blockchain.herokuapp.com/\";\r\n\r\nif (!document.ie) {\r\n  // check for ie\r\n  Promise.all([import(\"react\"), import(\"react-dom\"), import(\"App\")]).then(\r\n    ([{ default: React }, { default: ReactDOM }, { default: App }]) => {\r\n      ReactDOM.render(<App />, document.getElementById(\"root\"));\r\n    }\r\n  );\r\n\r\n  serviceWorker.register({\r\n    onSuccess: () => getSWActions().handleSuccess(),\r\n    onUpdate: (reg) => getSWActions().handleUpdate(reg),\r\n  });\r\n}\r\n","import { isMobile } from \"utils\";\r\n\r\n/* set your data here */\r\nconst email = \"muhammad_nurhidayat@apps.ipb.ac.id\";\r\nconst domain = \"Blockchain IPB\";\r\n/* ***************** */\r\n\r\nconst repository = \"https://github.com/danimnh/fe-blockchain\";\r\n\r\nconst messages = {\r\n  app: {\r\n    crash: {\r\n      title: \"Oooops... Sorry, I guess, something went wrong. You can:\",\r\n      options: {\r\n        email: `contact with author by this email - ${email}`,\r\n        reset: \"Press here to reset the application\",\r\n      },\r\n    },\r\n  },\r\n  loader: {\r\n    fail:\r\n      \"Hmmmmm, there is something wrong with this component loading process... Maybe trying later would be the best idea\",\r\n  },\r\n  images: {\r\n    failed: \"something went wrong during image loading :(\",\r\n  },\r\n  404: \"Hey bro? What are you looking for?\",\r\n};\r\n\r\nconst copyright = {\r\n  title: \"Copyright © \",\r\n  link: domain,\r\n};\r\n\r\nconst themes = {\r\n  light: {\r\n    palette: {\r\n      type: \"light\",\r\n      background: {\r\n        default: \"#fafafa\",\r\n        paper: \"#fff\",\r\n      },\r\n      primary: {\r\n        light: \"#7986cb\",\r\n        main: \"#3f51b5\",\r\n        dark: \"#303f9f\",\r\n        contrastText: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n\r\n  dark: {\r\n    palette: {\r\n      type: \"dark\",\r\n      background: {\r\n        default: \"#111\",\r\n        paper: \"#171717\",\r\n      },\r\n      primary: {\r\n        light: \"#7986cb\",\r\n        main: \"#333\",\r\n        dark: \"#303f9f\",\r\n        contrastText: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst cancelationMessage = \"operation is manually canceled\";\r\n\r\nconst dateFormat = \"MMMM DD, YYYY\";\r\n\r\nconst title = \"Sistem Rantai Pasok\";\r\n\r\nconst themePair = [\"light\", \"dark\"];\r\n\r\nconst notifications = {\r\n  options: {\r\n    anchorOrigin: {\r\n      vertical: \"bottom\",\r\n      horizontal: \"left\",\r\n    },\r\n    autoHideDuration: 3000,\r\n  },\r\n  maxSnack: isMobile ? 3 : 4,\r\n};\r\n\r\nconst loader = {\r\n  // no more blinking in your app\r\n  delay: 300, // if your asynchronous process is finished during 300 milliseconds you will not see the loader at all\r\n  minimumLoading: 700, // but if it appears, it will stay for at least 700 milliseconds\r\n};\r\n\r\nexport {\r\n  messages,\r\n  cancelationMessage,\r\n  dateFormat,\r\n  copyright,\r\n  email,\r\n  domain,\r\n  repository,\r\n  loader,\r\n  title,\r\n  themePair,\r\n  notifications,\r\n  themes,\r\n};\r\n","import { resetApp } from 'utils';\r\nimport { v1 as uuidv1 } from 'uuid';\r\n\r\nconst SW = {}; // don't keep it in the store\r\n\r\nconst sw = {\r\n  update() {\r\n    const registrationWaiting = SW.registration && SW.registration.waiting;\r\n\r\n    if (registrationWaiting) {\r\n      registrationWaiting.postMessage({ type: 'SKIP_WAITING' });\r\n      registrationWaiting.onstatechange = function(e) {\r\n        if (e.target.state === 'activated') {\r\n          resetApp();\r\n        }\r\n      };\r\n    }\r\n  },\r\n  saveRegistration(registration) {\r\n    SW.registration = registration;\r\n  },\r\n};\r\n\r\nconst theme = {\r\n  lsSave(mode) {\r\n    localStorage.setItem('theme-mode', mode);\r\n  },\r\n};\r\n\r\nconst genUUID = uuidv1;\r\n\r\nexport { sw, theme, genUUID };\r\n","import { atom, useRecoilState } from 'recoil';\r\nimport state from 'state-local';\r\n\r\nimport { noop } from 'utils';\r\nimport * as effects from 'store/effects';\r\n\r\nconst [getActions, setActions] = state.create({\r\n  handleSuccess: noop,\r\n  handleUpdate: noop,\r\n  update: noop,\r\n});\r\n\r\nconst swState = atom({\r\n  key: 'swState',\r\n  default: {\r\n    isInitialized: false,\r\n    isUpdated: false,\r\n    registration: null,    \r\n  },\r\n});\r\n\r\nfunction useSW() {\r\n  const [sw, setSW] = useRecoilState(swState);\r\n\r\n  function handleSuccess() {\r\n    setSW(state => ({ ...state, isInitialized: true }));\r\n  }\r\n\r\n  function handleUpdate(registration) {\r\n    setSW(state => ({ ...state, isUpdated: true }));\r\n    effects.sw.saveRegistration(registration);\r\n  }\r\n\r\n  function update() {\r\n    effects.sw.update();\r\n  }\r\n\r\n  setActions({ handleSuccess, handleUpdate, update });\r\n\r\n  return [sw, { handleSuccess, handleUpdate, update }];\r\n}\r\n\r\nexport { getActions };\r\n\r\nexport default useSW;\r\n","export default function noop() {}\r\n","import isMobile from 'is-mobile';\r\n\r\nexport default isMobile();\r\n","const resetApp = () => window.location.reload();\r\n\r\nexport default resetApp;\r\n","function downloadFile(path, name) {\r\n  const link = document.createElement('a');\r\n  link.href = path;\r\n  link.download = name;\r\n  link.dispatchEvent(new MouseEvent('click'));\r\n  link.remove();\r\n}\r\n\r\nexport default downloadFile;\r\n","const sleep = ms => new Promise(res => setTimeout(res, ms));\r\n\r\nexport default sleep;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  preloader: {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    height: '100%',\r\n    left: 0,\r\n    top: 0,\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    'background-color': theme.palette.background.default,\r\n  },\r\n  open: {\r\n    background: 'none',\r\n  },\r\n}));\r\n\r\nexport default useStyles;\r\n","import React from 'react';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport clsx from 'clsx';\r\n\r\nimport useStyles from './styles';\r\n\r\nfunction Loading({ size, withoutBackground }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Paper\r\n      elevation={0}\r\n      square={true}\r\n      className={clsx(classes.preloader, withoutBackground && classes.open)}\r\n    >\r\n      <CircularProgress thickness={1.5} color=\"inherit\" size={size} />\r\n    </Paper>\r\n  );\r\n}\r\n\r\nLoading.defaultProps = {\r\n  size: 50,\r\n};\r\n\r\nexport default Loading;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    display: 'flex',\r\n    height: '100%',\r\n    'justify-content': 'center',\r\n    'align-items': 'center',\r\n  },\r\n}));\r\n\r\nexport default useStyles;\r\n"],"sourceRoot":""}